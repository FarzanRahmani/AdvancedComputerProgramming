@page "/index3"
@using System.Drawing 
@inject IJSRuntime JsRuntime;

<div id="canvasContainer" style="position: fixed; opacity: 1; background-color: black; width: 100%; height: 100%">
    <BECanvas Width="1000" Height="1000" @ref="_canvasReference"></BECanvas>
</div>

@code
{
    private float rectX =0;
    private float rectY =0;
    private Canvas2DContext _context;//khod lakposht hast ke dar khat 11 ba tabe khat
    protected BECanvasComponent _canvasReference;
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    [JSInvokable]//vase ine ke java inga bezanim
    
    protected override async Task OnAfterRenderAsync(bool firstRender)//in bad az bala omadan safhe va egra html ha ast
    {
        if (firstRender)
        {
            
            await JsRuntime.InvokeAsync<object>("initGame", DotNetObjectReference.Create(this));//tabe haye javascript mesl init game ra dar index.html tarif mikonim
            _context = await _canvasReference.CreateCanvas2DAsync();
            await _context.SetTextBaselineAsync(TextBaseline.Top);
        }
    }
    [JSInvokable]
    public async ValueTask GameLoop(float timeStamp, int screenWidth, int screenHeight)
    {
        await Update(screenWidth, screenHeight);
        await Render(screenWidth, screenHeight);
    }

    private async ValueTask Update(int screenWidth, int screenHeight)
    {
        rectX += 1;
        rectY += 1;
        if (rectX + 150 > screenWidth)
        {
            rectX = 0;
            rectX = 0;
        }
        if (rectY + 100 > screenHeight)
        {
            rectY = 0;
            rectY = 0;
        }
    }
    private async ValueTask Render(int width, int height)
    {
        await _context.ClearRectAsync(0, 0, width, height);
        await _context.SetFillStyleAsync("red");
        await _context.FillRectAsync(rectX, rectY, 150, 100);
    }
}